class Game
{
    field Wolf wolf;
    field int score, eggDelay, eggDelayCounter;
    field boolean isOver;

    field Queue eggsGroup;

    field Array GroupsTails;

    constructor Game new()
    {
        let wolf = Wolf.new();
        let score = 0;
        let eggDelay = 10;
        let eggDelayCounter = 0;
        let isOver = false;
        let eggsGroup = Queue.new();
        let GroupsTails = Array.new(4);
        return this;
    }

    method void run()
    {
        var char key;
        var int position;

        do drawBackground();

        while (~isOver)
        {
            //ожидаю какое то время
            do Sys.wait(15);

            let key = Keyboard.keyPressed();

            //тут считываю значение с клавиатуры, надо потом настроить значения, пока они на стрелочки просто /todo
            if (key = 131){ let position = 1;}
            if (key = 133){ let position = 2;}
            if (key = 130){ let position = 3;}
            if (key = 132){ let position = 4;}

            do wolf.SetPosition(position);
            do wolf.Draw();//изменится, поменять /todo

            //проходится по группам яиц,двигая их и проверяя не упали ли какие либо яйца
            do goThrewEggs();

            //ускоряю игру, если скор стал больше 5, то яйцо спавнится каждые 7 итераций и тд, можно переместить метод в прохождение по яйцам /todo
            if (score > 5){let eggDelay = 7;}
            if (score > 10){let eggDelay = 5;}

            if (eggDelayCounter = eggDelay)
            {
                let eggDelayCounter = 0;
                do throwEgg();
            }
            else{let eggDelayCounter = eggDelayCounter + 1;}
        }

        //сделать что нибудь если умерли, там очереди обнулить /todo

        return;
    }

    method void goThrewEggs()
    {
        var QueueItem item;
        var boolean fell;
        var Egg egg;

        let fell = false;
        let item = eggsGroup.getTail(); 

        while (~(item = null))
        {
            let egg = item.getEgg();
            let fell = egg.doSmth();//доделать когда появится яйцо /todo
            let item = item.getNext();
        }

        if (fell)
        {
            let egg = eggsGroup.dequeue();
            if (~(wolf.GetPoistion() = egg.getPosition())){let isOver = true;}
            else
            {
                let score = score + 1;
                do drawScore();
            }
        }
        return;
    }

    method void throwEgg()
    {
        var Random random;
        var int groupNumber;
        var boolean label;

        let random = Random.new();
        //тут в теории получаем число от 0 до 3, типо куда кидать
        let groupNumber = random.rand();//надо /todo

        let label = false;

        //идём по всем местам, для спавная яиц от рандомного пока не находим где нет в начале яйца, далее кидаем туда яйцо
        while (~label)
        {
            let label = tryPush(groupNumber);
            let groupNumber = groupNumber + 1 - ((groupNumber + 1) / 4);
        }
        return;
    }

    method boolean tryPush(int groupNumber)//если не может кинуть в выбранное место яйцо, возвращает false иначе true и кидает его
    {
        var Egg newEgg; 
        var Egg tailEgg;

        let tailEgg = GroupsTails[groupNumber];

        if (tailEgg = null){return false;}
        if(tailEgg.getStage() = 0){return false;} 

        let newEgg = Egg.new(groupNumber);
        let GroupsTails[groupNumber] = newEgg;
        do eggsGroup.enqueue(newEgg);

        return true;
    }

    method void drawBackground()
    {
        //нарисовать фон /todo
        return;
    }

    method void drawScore()
    {
        var int counter;
        var int ost;
        var int position;

        let position = 0;
        let counter = score;

        while(~(score = 0)) 
        {
            let ost = counter - (counter / 10);
            do drawNumber(ost);
            let counter = counter / 10;
            let position = position + 10;
        }
        return;
    }

    //методы рисующие части цифр,вид цифр:
    // ||||||
    // ||  ||
    // ||||||
    // ||  ||
    // ||||||
    method void drawNumber(int number,int position)
    {
        if(number = 0)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 1)
        {
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
        }
        if(number = 2)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 3)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 4)
        {
            do drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
        }
        if(number = 5)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 6)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 7)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
        }
        if(number = 8)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do drawRectangle(position, 14, position + 1, 19);//нижняя левая вертикальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        if(number = 9)
        {
            do drawRectangle(position, 10, position + 5, 11);//верхняя горизонтальная
            do drawRectangle(position, 10, position + 1, 15);//верхняя левая вертикальная
            do drawRectangle(position + 4, 10, position + 5, 15);//верхняя правая вертикальная
            do drawRectangle(position, 14, position + 5, 15);//посередине горизонтальная
            do drawRectangle(position + 4, 14, position + 5, 19);//нижняя правая вертикальная
            do drawRectangle(position, 18, position + 5, 19);//нижняя горизонтальная
        }
        return;
    }

    method void dispose()
    {
        do wolf.dispose();
        do eggsGroup.dispose();

        do Memory.deAlloc(this);
		return;
    }
}
//umpalumpa123
// инициализация объектов - волк, яйца. Игровое взаимодействие.
// игра бексонечная, сверху счет
// если фаза у яйца 6, то проверяем волк словит или нет \/
// поле проиграл ли игрок - game over \/
// поле список яиц \/
// Тим
//gfgffgfg